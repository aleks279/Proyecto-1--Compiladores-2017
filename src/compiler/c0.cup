package compiler;

import java.util.*;
import java_cup.runtime.*;
import codeGen.*;
import symTable.*;
import types.*;

action code {:
    public int addressCounter = 65535;
    public int whileCounter;
    public int ifCounter;
    Stack<Integer> pile;
    void initialize() {
        // Sym table stack initializer
        SymTable.initialize();

        // Initialize types
        Type.createTypes();
        CICode.listenCode();
        //
        ifCounter=0;
        whileCounter=0;
        pile = new Stack<Integer> ();
    }

    Expression plus(Expression e1, Expression e2){
        addressCounter--;
        CICode.saveCode("SUMAR",
            String.valueOf(e1.getAddress()),
            String.valueOf(e2.getAddress()),
            String.valueOf(addressCounter));
        return new Expression(addressCounter);
    }
    Expression minus(Expression e1, Expression e2){
        addressCounter--;
        CICode.saveCode("RESTAR",
            String.valueOf(e1.getAddress()),
            String.valueOf(e2.getAddress()),
            String.valueOf(addressCounter));
        return new Expression(addressCounter);
    }
    Expression mul(Expression e1, Expression e2){
        addressCounter--;
        CICode.saveCode("MULTIPLICAR",
            String.valueOf(e1.getAddress()),
            String.valueOf(e2.getAddress()),
            String.valueOf(addressCounter));
        return new Expression(addressCounter);
    }
    Expression div(Expression e1, Expression e2){
        addressCounter--;
        CICode.saveCode("DIVIDIR",
            String.valueOf(e1.getAddress()),
            String.valueOf(e2.getAddress()),
            String.valueOf(addressCounter));
        return new Expression(addressCounter);
    }
    Expression integer(String e){
        addressCounter--;
        CICode.saveCode("CARGAR_VALOR",
            e,
            "null",
            String.valueOf(addressCounter));
        return new Expression(addressCounter);
    }
    Expression id(String id){
        addressCounter--;
        CICode.saveCode("CARGAR_DIRECCION",
            String.valueOf((SymTable.get(id)).getAddress()),
            "null",
            String.valueOf(addressCounter));
        return new Expression(addressCounter);
    }


    Expression or(Expression c1, Expression c2){
        addressCounter--;
        CICode.saveCode("OR",
            String.valueOf(c1.getAddress()),
            String.valueOf(c2.getAddress()),
            String.valueOf(addressCounter));
        return new Expression(addressCounter);
    }
    Expression and(Expression c1, Expression c2){
        addressCounter--;
        CICode.saveCode("AND",
            String.valueOf(c1.getAddress()),
            String.valueOf(c2.getAddress()),
            String.valueOf(addressCounter));
        return new Expression(addressCounter);
    }
    Expression greater(Expression e1, Expression e2){
        addressCounter--;
       CICode.saveCode("MAYOR",
            String.valueOf(e1.getAddress()),
            String.valueOf(e2.getAddress()),
            String.valueOf(addressCounter));
        return new Expression(addressCounter);
    }
    Expression less(Expression e1, Expression e2){
        addressCounter--;
       CICode.saveCode("MENOR",
            String.valueOf(e1.getAddress()),
            String.valueOf(e2.getAddress()),
            String.valueOf(addressCounter));
        return new Expression(addressCounter);
    }
    Expression equal(Expression e1, Expression e2){
        addressCounter--;
       CICode.saveCode("IGUAL",
            String.valueOf(e1.getAddress()),
            String.valueOf(e2.getAddress()),
            String.valueOf(addressCounter));
        return new Expression(addressCounter);
    }
    Expression unequal(Expression e1, Expression e2){
        addressCounter--;
       CICode.saveCode("DISTINTO",
            String.valueOf(e1.getAddress()),
            String.valueOf(e2.getAddress()),
            String.valueOf(addressCounter));
        return new Expression(addressCounter);
    }

    //methods

    void assign(String s, Expression e){
        CICode.saveCode("CARGAR_DIRECCION",
            String.valueOf(e.getAddress()),
            "null",
            String.valueOf((SymTable.get(s)).getAddress()));
    }


    void condition(Expression e, int n){
        CICode.saveCode("SALTAR_CONDICION",
            String.valueOf(e.getAddress()),
            "null",
            "ELSE_"+String.valueOf(n));        
    }

    void jumpLabel(String label, int n){
        CICode.saveCode("SALTAR_CONDICION",
            "null",
            "null",
            label+"_"+String.valueOf(n));    
    }

    void putLabel(String label, int n){
        CICode.saveCode("ETIQUETA",
            "null",
            "null",
            label+"_"+String.valueOf(n));    
    }


    //borre el while por errores
    //faltan prints


:}

terminal PLUS, MINUS, MUL, DIV, ASSIGN;
terminal GREATER, LESS, EQUAL, UNEQUAL;
terminal AND, OR, MAIN, PUTW, PUTS, QUOTE;
terminal IF, ELSE, WHILE, BREAK;
terminal LPAREN, RPAREN, LBRACE, RBRACE, SEMICOLON;

terminal String ID;
terminal String INT;
terminal String STRING;

// non terminals
non terminal Program, Assigns, Body;
non terminal Assign;
non terminal SentenceBlock;
non terminal Sentences, Sentence;
non terminal Expression Expression;
non terminal Expression Condition;
non terminal SentIf, SentElse;
non terminal SentWhile;
non terminal SentAssign;
non terminal SentPutw, SentPuts;
non terminal SentBreak;

precedence left ASSIGN;
precedence left OR, AND;
precedence left EQUAL, UNEQUAL, GREATER, LESS;
precedence left PLUS, MINUS;
precedence left MUL, DIV;
precedence left LPAREN, RPAREN;
precedence left ELSE;

// grammar

Program ::= {:
                initialize();

            :}
            Assigns Body | Body;

Assigns ::= Assigns Assign | Assign;

Assign ::= INT ID:id SEMICOLON {:
                symTable.Symbol sym = new symTable.Symbol(id, types.Type.getType(types.Type.INTEGER), false, --addressCounter);
                if(SymTable.insert(id, sym)) {
                    // insertar codigo para codigo intermedio aqui
                } else {
                    // error code here
                }
            :};

Body ::= MAIN LPAREN RPAREN LBRACE SentenceBlock {:
                CICode.closeIC();
            :} RBRACE;

SentenceBlock ::= Assigns |;

Sentences ::= Sentences Sentence | Sentence;

Expression ::= Expression:e1 PLUS Expression:e2 {:
                RESULT= plus(e1,e2);
            :} |
            Expression:e1 MINUS Expression:e2 {:
                RESULT= minus(e1,e2);
            :} |
            Expression:e1 MUL Expression:e2 {:
                RESULT= mul(e1,e2);
            :} |
            Expression:e1 DIV Expression:e2 {:
                RESULT= div(e1,e2);
            :} |
            INT:e {:
                RESULT= integer(e);
            :} |
            ID:id {:
                symTable.Symbol sym = new symTable.Symbol(id, types.Type.getType(types.Type.INTEGER), false, --addressCounter);
                if(SymTable.insert(id, sym)) {
                    RESULT = id(id);
                } else {
                    // error code here
                    RESULT = id("null");
                }
            :} |
            LPAREN Expression:e RPAREN {:
                RESULT= e;
            :};
                

Condition ::= Condition:c1 OR Condition:c2 {:
                RESULT = or(c1,c2);
            :} |
            Condition:c1 AND Condition:c2 {:
                RESULT = and(c1,c2);
            :} |
            Expression:e1 EQUAL Expression:e2 {:
                RESULT = equal(e1,e2);
            :} |
            Expression:e1 UNEQUAL Expression:e2 {:
                RESULT = unequal(e1,e2);
            :} |
            Expression:e1 GREATER Expression:e2 {:
                RESULT = greater(e1,e2);
            :} |
            Expression:e1 LESS Expression:e2 {:
                RESULT = less(e1,e2);
            :} |
            LPAREN Condition:c RPAREN {:
                RESULT = c;
            :};

SentIf ::= IF LPAREN {:
                ifCounter++;
                pile.push(ifCounter);
            :} Condition:c {:
                condition(c, pile.peek());
            :} RPAREN LBRACE SentenceBlock RBRACE {:
                jumpLabel("FINIF", pile.peek());
                putLabel("ELSE", pile.peek());
            :}
            SentElse {:
                putLabel("FINIF", pile.peek());
                pile.pop();
            :};

SentElse ::= ELSE LBRACE SentenceBlock RBRACE |;

SentWhile ::= WHILE LPAREN {:
            :} Condition:c {:
            :} RPAREN LBRACE {:
            :} SentenceBlock {:
            :} RBRACE {:
            :};

SentAssign ::= ID:id {:
            :} ASSIGN Expression:e SEMICOLON {:
                assign(id,e);
            :};

SentPutw ::= PUTW LPAREN Expression:e {:
            :} RPAREN SEMICOLON;

SentPuts ::= PUTS LPAREN STRING:s {:
            :} RPAREN SEMICOLON;

SentBreak ::= BREAK {:
            :} SEMICOLON;

Sentence ::=    SentIf |
                SentWhile |
                SentAssign |
                SentPutw |
                SentPuts |
                SentBreak;
