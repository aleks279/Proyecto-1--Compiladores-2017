package compiler;


import java_cup.runtime.*;
import codeGen.*;
import symTable.*;
import types.*;

action code {:
    public int addressCounter = 65535;
    
    void initialize() {
        // Sym table stack initializer
        SymTable.initialize();

        // Initialize types
        Type.createTypes();
    }
        
:}

terminal PLUS, MINUS, MUL, DIV, ASSIGN;
terminal GREATER, LESS, EQUAL, UNEQUAL;
terminal AND, OR, MAIN, PUTW, PUTS, QUOTE;
terminal IF, ELSE, WHILE, BREAK;
terminal LPAREN, RPAREN, LBRACE, RBRACE, SEMICOLON;

terminal String ID;
terminal String INT;
terminal String STRING;

// non terminals
non terminal Program, Assigns, Body;
non terminal Assign;
non terminal SentenceBlock;
non terminal Sentences, Sentence;
non terminal Expression Expression;
non terminal Expression Condition;
non terminal SentIf, SentElse;
non terminal SentWhile;
non terminal SentAssign;
non terminal SentPutw, SentPuts;
non terminal SentBreak;

precedence left ASSIGN;
precedence left OR, AND;
precedence left EQUAL, UNEQUAL, GREATER, LESS;
precedence left PLUS, MINUS;
precedence left MUL, DIV;
precedence left LPAREN, RPAREN;
precedence left ELSE;

// grammar

Program ::= {:
                initialize();
            :}
            Assigns Body | Body;

Assigns ::= Assigns Assign | Assign;

Assign ::= INT ID:id SEMICOLON {:
                symTable.Symbol sym = new symTable.Symbol(id, types.Type.getType(types.Type.INTEGER), false, --addressCounter);
                if(SymTable.insert(id, sym)) {
                    // insertar codigo para codigo intermedio aqui
                } else {
                    // error code here
                }
            :};

Body ::= MAIN LPAREN RPAREN LBRACE SentenceBlock {:
            :} RBRACE;

SentenceBlock ::= Assigns |;

Sentences ::= Sentences Sentence | Sentence;

Expression ::= Expression:e1 PLUS Expression:e2 {:
            :} |
            Expression:e1 MINUS Expression:e2 {:
            :} |
            Expression:e1 MUL Expression:e2 {:
            :} |
            Expression:e1 DIV Expression:e2 {:
            :} |
            Expression:e1 PLUS Expression:e2 {:
            :} |
            INT:e {:
            :} |
            ID:id {:
            :};

Condition ::= Condition:c1 OR Condition:c2 {:
            :} |
            Condition:c1 AND Condition:c2 {:
            :} |
            Condition:c1 EQUAL Condition:c2 {:
            :} |
            Condition:c1 UNEQUAL Condition:c2 {:
            :} |
            Condition:c1 GREATER Condition:c2 {:
            :} |
            Condition:c1 LESS Condition:c2 {:
            :} |
            LPAREN Condition:c RPAREN {:
            :};

SentIf ::= IF LPAREN {:
            :} Condition:c {:
            :} RPAREN LBRACE SentenceBlock RBRACE {:
            :}
            SentElse {:
            :};

SentElse ::= ELSE LBRACE SentenceBlock RBRACE |;

SentWhile ::= WHILE LPAREN {:
            :} Condition:c {:
            :} RPAREN LBRACE {:
            :} SentenceBlock {:
            :} RBRACE {:
            :};

SentAssign ::= ID:id {:
            :} ASSIGN Expression:e SEMICOLON {:
            :};

SentPutw ::= PUTW LPAREN Expression:e {:
            :} RPAREN SEMICOLON;

SentPuts ::= PUTS LPAREN STRING:s {:
            :} RPAREN SEMICOLON;

SentBreak ::= BREAK {:
            :} SEMICOLON;

Sentence ::=    SentIf |
                SentWhile |
                SentAssign |
                SentPutw |
                SentPuts |
                SentBreak;
